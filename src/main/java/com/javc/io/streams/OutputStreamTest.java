package com.javc.io.streams;

import java.io.FileOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;

/*
Разница между InputStream и Reader.
Как InputStream, так и Reader могут использоваться для чтения данных (чтения данных из файла или чтения данных из сокета),
основные различия заключаются в следующем:
InputStream используется для чтения двоичных чисел (потоков байтов), а Reader - для чтения текстовых данных,
то есть символов Unicode. Так в чем же разница между двоичными числами и текстовыми данными?
По сути, все содержимое считывается байтами. Чтобы преобразовать байты в текст, необходимо указать метод кодирования.
Считыватель может закодировать поток байтов и преобразовать его в текст. Конечно, в этом процессе преобразования используется
метод кодирования, который по умолчанию использует метод кодирования системы для кодирования потока байтов. Также можно явно
указать метод кодирования, например «UTF-8». Хотя эта концепция очень проста, Java-программисты часто допускают ошибки кодирования,
и наиболее распространенной ошибкой является не указание метода кодирования. При чтении файлов или чтении данных из сокетов,
если не указан правильный метод кодирования, считанные данные могут быть искажены, что может привести к потере данных.


Во-вторых, разница между FileInputStream и FileReader:
FileInputStream и FileReader имеют сходные различия, они используются для чтения данных из файла,
но FileInputStream используется для чтения двоичных данных (байтовый поток) из файла,
а FileReader используется для чтения символьных данных из файла.
FileReader наследуется от InputStreamReader, он использует либо системный метод кодирования по умолчанию,
либо метод кодирования, используемый InputStreamReader. Следует отметить, что InputStreamReader кэширует кодировку символов,
поэтому после создания объекта InputStreamReader, если вы измените кодировку символов, это не будет иметь никакого эффекта.
 */
public class OutputStreamTest {

    public static void main(String[] args) throws IOException {
        byte[] bytes = "Hello\nworld".getBytes(StandardCharsets.US_ASCII); //закодировать поток байтов в строку согласно US_ASCII

        FileOutputStream fileOutputStream = new FileOutputStream("src/main/java/com/javc/io/streams/file.txt");
//        fileOutputStream.write(bytes, 0, bytes.length);
        fileOutputStream.write(bytes);
        fileOutputStream.close();
    }
}